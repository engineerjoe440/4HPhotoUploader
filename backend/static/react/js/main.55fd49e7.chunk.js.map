{"version":3,"sources":["Consent.js","App.js","registerServiceWorker.js","index.js"],"names":["trigger","modal","nested","defaultOpen","close","className","onClick","position","console","log","App","props","state","error","Consent","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"+OAGe,oBACb,kBAAC,IAAD,CACEA,QAAS,8BACTC,OAAK,EACLC,QAAM,EACNC,aAAW,IAEV,SAAAC,GAAK,OACJ,yBAAKC,UAAU,SACb,4BAAQA,UAAU,QAAQC,QAASF,GAAnC,QAGA,yBAAKC,UAAU,UAAf,iBACA,yBAAKA,UAAU,WACZ,IADH,qOAKE,6BALF,6NAUA,yBAAKA,UAAU,WACb,kBAAC,IAAD,CACEL,QAAS,4BAAQK,UAAU,UAAlB,aACTE,SAAS,aACTL,QAAM,GAEN,gRAOF,4BACEG,UAAU,SACVC,QAAS,WACPE,QAAQC,IAAI,iBACZL,MAJJ,qBCCKM,G,8DAvBb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,MAAO,MAJQ,E,gEANlB,IAiBCL,QAAQC,IAAI,a,+BAIZ,OACE,yBAAKJ,UAAU,OACb,kBAACS,EAAD,W,GAlBUC,cCNZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBlB,QACfY,UAAUC,cAAcQ,WAK1BzB,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrByB,OAAM,SAAArB,GACLL,QAAQK,MAAM,4CAA6CA,MCzEjEsB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBd,UAAW,CAGzE,GADkB,IAAIe,IAAIC,gBAAwBtB,OAAOC,UAC3CsB,SAAWvB,OAAOC,SAASsB,OAIvC,OAGFvB,OAAOwB,iBAAiB,QAAQ,WAC9B,IAAMnB,EAAK,UAAMiB,gBAAN,sBAEPxB,IAiDV,SAAiCO,GAE/BoB,MAAMpB,GACHI,MAAK,SAAAiB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CxB,UAAUC,cAAcwB,MAAMtB,MAAK,SAAAC,GACjCA,EAAasB,aAAavB,MAAK,WAC7BT,OAAOC,SAASgC,eAKpB7B,EAAgBC,MAGnBW,OAAM,WACL1B,QAAQC,IACN,oEArEA2C,CAAwB7B,GAIxBC,UAAUC,cAAcwB,MAAMtB,MAAK,WACjCnB,QAAQC,IACN,gHAMJa,EAAgBC,OCzCxB8B,I","file":"js/main.55fd49e7.chunk.js","sourcesContent":["import React from 'react';\nimport Popup from 'reactjs-popup';\n\nexport default () => (\n  <Popup\n    trigger={<div />}\n    modal\n    nested\n    defaultOpen\n  >\n    {close => (\n      <div className=\"modal\">\n        <button className=\"close\" onClick={close}>\n          &times;\n        </button>\n        <div className=\"header\"> Modal Title </div>\n        <div className=\"content\">\n          {' '}\n          Lorem ipsum dolor sit amet consectetur adipisicing elit. Atque, a nostrum.\n          Dolorem, repellat quidem ut, minima sint vel eveniet quibusdam voluptates\n          delectus doloremque, explicabo tempore dicta adipisci fugit amet dignissimos?\n          <br />\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit. Consequatur sit\n          commodi beatae optio voluptatum sed eius cumque, delectus saepe repudiandae\n          explicabo nemo nam libero ad, doloribus, voluptas rem alias. Vitae?\n        </div>\n        <div className=\"actions\">\n          <Popup\n            trigger={<button className=\"button\"> Trigger </button>}\n            position=\"top center\"\n            nested\n          >\n            <span>\n              Lorem ipsum dolor sit amet, consectetur adipisicing elit. Beatae\n              magni omnis delectus nemo, maxime molestiae dolorem numquam\n              mollitia, voluptate ea, accusamus excepturi deleniti ratione\n              sapiente! Laudantium, aperiam doloribus. Odit, aut.\n            </span>\n          </Popup>\n          <button\n            className=\"button\"\n            onClick={() => {\n              console.log('modal closed ');\n              close();\n            }}\n          >\n            close modal\n          </button>\n        </div>\n      </div>\n    )}\n  </Popup>\n);","import React, { Component } from \"react\";\nimport Popup from 'reactjs-popup';\nimport Consent from './Consent';\n//import Popup from 'react-popup';\n//import moment from \"moment\";\n\nimport \"./App.css\";\nimport 'reactjs-popup/dist/index.css';\n\n\nconst PopupExample = () => (\n  <Popup trigger={<button> Trigger</button>} position=\"right center\">\n    <div>Popup content here !!</div>\n  </Popup>\n);\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      error: null\n    };\n\n  }\n  // use comonentDidMount lifecycle method\n  componentDidMount() {\n    PopupExample();\n    console.log(\"loaded!\");\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Consent />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}